/* Modified by Rue Green 08/09/2022 ------>
    Updated code to add buttons for calling, consultative transfer and blind transfer.  Also added
    Properties to the Desktop Layout JSON file (addressbook-widget.json in project) to support passing in the users
    OutDial EP ID and 3 real names, phone numbers and email address for the first three cards in the address book.  This
    allows the user to setup three real contacts in the address book for demo.  I also increased the size of the total
    dummy contacts generated by the API to 2000 so we can show customers how to exceed the current limitation of the
    WxCC phonebook of 150 records.
 */


import { Desktop } from '@wxcc-desktop/sdk';

customElements.define(
  'sa-address-book',
  class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: 'open' });
      const font = document.createElement('link');
      font.href =
        'https://fonts.googleapis.com/css2?family=Cutive+Mono&family=Darker+Grotesque:wght@300&family=Poppins:wght@200;400&display=swap';
      font.rel = 'stylesheet';
      document.head.appendChild(font);
    }
    // Function for making outDial call
    async makeCall(destination) {
      // the phone number from the contact cards
      console.log(destination);
      //This is passed in via a prop in the Desktop Layout JSON file
      let myOutdialEPID = this.myOutdialEPID;
      try {
         await Desktop.dialer.startOutdial({
          data: {
            // your outDial entrypoint ID from Portal,
            entryPointId: myOutdialEPID,
            destination,
            direction: 'OUTBOUND',
            attributes: {},
            mediaType: 'telephony',
            outboundType: 'OUTDIAL',
          },
        });
      } catch (error) {
        console.log(error);
      }
    }

    static get observedAttributes() {
      return ['loading'];
    }
    get loading() {
      return JSON.parse(this.getAttribute('loading'));
    }
    set loading(v) {
      this.setAttribute('loading', JSON.stringify(v));
    }

    // using free API
    async fetchAPI(url) {
      this.loading = true;
      const response = await fetch(url);
      const json = await response.json();
      this.users = json;
      console.log(json);
      this.loading = false;
    }
    // Free APi with pulling down 100 users. Replace this line with YOUR-ADDRESS-BOOK-API
    // The API requires an object with phone,email,name.first.
    async connectedCallback() {
      Desktop.config.init();
      await this.fetchAPI('https://randomuser.me/api/?results=2000');
      await this.click2call();
      await this.click2callRealNum();
      await this.searchInput();
      //Install all the listeners for every button on all address cards!
      await this.callingEventListeners();
    }
      // Get interactionID, but more info can be obtained from this method
      // This is used to parse the key value pair, filter Fetched: in
      // console log and cut/paste to jsonformatter.org and its parser will
      // display the json tree
      async getInfo() {
          console.log('Getting Task Information..');
          const currentTaskMap = await Desktop.actions.getTaskMap();
          console.log('Fetched: ' + JSON.stringify(currentTaskMap));
          currentTaskMap.forEach (function(value, key) {
              console.log("key: " + key + " Value: " + value);
              console.log("Value: " + value.interaction.mediaType);
              if(value.interaction.mediaType == "telephony") {
                  console.log("Value of interId: " + value.interactionId);
                  return value;
              }
          })
      }
      async callingEventListeners(){
        /* Lets get the interaction Id for telephony and use it for transferring
           and consulting. Placed it inline so we could get the string and not the object that is returned
           from getInfo().  You could call get info and walk the object value.interactionId if you want to
           remove the code below.  Install unique event listeners for every card and every button by walking the list
           of button elements in the shadow DOM, checking what type of button it is, using its value set in the HTML
           in render() and install event handler to switch() based on the type of button it is.
         */
        let interId = "";
        let agentId = "";
        let phone = "";
        let destination = "";
        let mediaId = "";
        let myOutdialEPID = this.myOutdialEPID;
        const currentTaskMap = await Desktop.actions.getTaskMap();
        currentTaskMap.forEach (function(value, key) {
            if (value.interaction.mediaType == "telephony") {
                interId = value.interactionId;
                agentId = value.agentId;
                mediaId = value.mediaResourceId;
            }
        })
        let btns = this.shadowRoot.querySelectorAll('.button');
        for (const element of btns) {
            element.addEventListener("click", function () {
                switch(element.id){
                    case "btnTransfer":
                        phone = element.value;
                        destination = phone.replace(/[\W_]/g, '');
                        try {
                            Desktop.agentContact.blindTransfer({
                                interactionId: interId,
                                data: {
                                    agentId: agentId,
                                    destAgentId: destination,
                                    mediaType: 'telephony',
                                    destinationType: "DN",
                                    mediaResourceId: mediaId
                                }
                            });
                            } catch (error) {
                                console.log(error);
                            }
                        break;
                    case "btnConsult":
                        phone = element.value;
                        destination = phone.replace(/[\W_]/g, '');
                        try {
                            Desktop.agentContact.consult({
                                interactionId: interId,
                                data: {
                                    agentId: agentId,
                                    destAgentId: destination,
                                    mediaType: 'telephony',
                                    destinationType: "DN"
                                },
                                url: 'consult'
                            });
                        } catch (error) {
                            console.log(error);
                        }
                        break;
                    case "btnConference":
                        phone = element.value;
                        destination = phone.replace(/[\W_]/g, '');
                        try {
                            Desktop.agentContact.consultConference({
                                interactionId: interId,
                                data: {
                                    agentId: agentId,
                                    destAgentId: destination,
                                    mediaType: 'telephony',
                                    destinationType: "DN",
                                    mediaResourceId: mediaId
                                }
                            });
                        } catch (error) {
                            console.log(error);
                        }
                        break;
                    case "btnCall":
                        phone = element.value;
                        destination = phone.replace(/[\W_]/g, '');
                        try {
                            Desktop.dialer.startOutdial({
                                data: {
                                    // your outDial entrypoint ID from Portal
                                    entryPointId: myOutdialEPID,
                                    destination,
                                    direction: 'OUTBOUND',
                                    attributes: {},
                                    mediaType: 'telephony',
                                    outboundType: 'OUTDIAL',
                                },
                            });
                        } catch (error) {
                            console.log(error);
                        }
                        break;
                }
            });
        }
    }
    disconnectedCallback() {;}
    attributeChangedCallback(attrName, oldVal, newVal) {
      this.render();
    }

    // Listen for click on the phone number used to call your working number...
    async click2callRealNum() {
      this.shadowRoot.querySelector('.phone').addEventListener('click', (e) => {
        let phone = e.target.textContent;
        let destination = phone.replace(/[\W_]/g, '');
        console.log(destination);
        this.makeCall(destination);
      });
    }

    // Listen for click on the phone number event
    async click2call() {
      let mainCard = this.shadowRoot.querySelector(
        '[data-user-cards-container]'
      );
      mainCard.addEventListener('click', (e) => {
        const selectPhone = e.target.classList.contains('phone');
        if (!selectPhone) {
          return;
        } else {
          let phone = e.target.textContent;
          let destination = phone.replace(/[\W_]/g, '');
          this.makeCall(destination);
        }
      });
    }

    // Search Bar
    async searchInput() {
      const userCardTemplate = this.shadowRoot.querySelector(
        '[data-user-template]'
      );
      const userCardContainer = this.shadowRoot.querySelector(
        '[data-user-cards-container]'
      );
      const searchInput = this.shadowRoot.querySelector('[data-search]');

      // Modify these lines based on how the data is returned from your API.
      // This is a simple example of using name,email and phone to build a contact card.
      let users = this.users.results.map((user) => {
        const card = userCardTemplate.content.cloneNode(true).children[0];
        const header = card.querySelector('[data-header]');
        const email = card.querySelector('[data-email]');
        const phone = card.querySelector('[data-phone]');
        header.textContent = user.name.first;
        email.textContent = user.email;
        phone.textContent = user.phone;
        userCardContainer.append(card);
        return {
          name: user.name.first,
          email: user.email,
          phone: user.phone,
          element: card,
        };
      });
      searchInput.addEventListener('input', function (e) {
        const value = e.target.value.toLowerCase();
        users.forEach((user) => {
          const isVisible =
            user.name.toLowerCase().includes(value) ||
            user.email.toLowerCase().includes(value);
          user.element.classList.toggle('hide', !isVisible);
        });
      });
    }

    // Render contacts on webpage
    render() {
      if (this.loading) {
        this.shadowRoot.innerHTML = `Loading...`;
      } else {
        this.shadowRoot.innerHTML = `
        <style>
        .container{
          overflow: var(--flow, scroll);
          font-family: 'Poppins', sans-serif;
        }
       
        .search-wrapper {
          width:30%;
          display: flex;
          flex-direction: column;
          gap: 0.25rem;
          margin-top: 60px
        }

        h3{
          display: flex;
          flex-direction: column;
          background: red;
        }
        
        input {
          font-size: 1rem;
          margin-bottom: 2rem;
          padding: .5rem;
          border-radius: 20px;
          border:1px solid 
        }
        
        .user-cards {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
          gap: 0.95rem;
          margin-top: 1rem;
        }
        
        .card {
          border: 1px solid black;
          background-color: white;
          padding: 0.5rem;
          border-radius: 8px;
          border-right: 10px solid #A12512;
          box-shadow: 10px 10px 5px 0px rgba(158,158,158,1);
          overflow: scroll;
        }
        
        .card > .header {
          margin-bottom: 0.25rem;
          font-weight: bold;
        }
        
        .card > .email {
          font-size: 0.8rem;
          color: #777;
          margin-bottom: 0.25rem;
        }
        .card > .phone {
          color: #005e7d;
          cursor: pointer;
        }
        .button  {
        display: inline-block;
        background-color: #183fcd;
        border-radius: 10px;
        border: 4px double #cccccc;
        color: #eeeeee;
        text-align: center;
        font-size: 8px;
        padding: 5px;
        width: 45px;
        -webkit-transition: all 0.5s;
        -moz-transition: all 0.5s;
        -o-transition: all 0.5s;
        transition: all 0.5s;
        cursor: pointer;
        margin: 5px;
      }
      

        ::placeholder{
          text-indent: 8px;
          color: gray;
          font-family: 'Darker Grotesque', sans-serif;
        }

        input:focus {
          outline: none !important;
          border:1px solid #005e7d;
          box-shadow: 10px 10px 5px 0px rgba(158,158,158,1);
          opacity: .8;
        }
        .navbar {
          background-color: #064157;
          color: white;
          text-align: center;
          width: 100%;
          padding: 5px 0;
          font-family: 'Cutive Mono', monospace;
          font-size: 30px;
        }
       
        span.title {
          font-size: .9rem;
        }
        .search {
          margin-left: 14px;
        }
        
        .hide {
          display: none;
        }
        </style>

       <div class="container">
              <div class="navbar"><slot name="title">Custom Address Book</slot>
              <span class="title"><p>Click the number or button to place an outbound call. Click other buttons to place a consult or blind transfer call.</p></span>
              </div>

              <div class="search-wrapper">
                <label class="search" for="search">SEARCH CONTACTS</label>
                <input type="search" id="search" placeholder="TYPE NAME OR EMAIL" data-search />
              </div>

            <div class="user-cards" data-user-cards-container>
            <div class="card">
                  <div class="header">${this.realName1}</div>
                  <div class="email">${this.realEmail1}</div>
                  <div class="phone">${this.realNumber1}</div>
                  <div> 
                    <button type="button" id="btnCall" class="button" value="${this.realNumber1}">Call</button>
                    <button type="button" id="btnConsult" class="button" value="${this.realNumber1}">Consult</button>
                    <button type="button" id="btnTransfer" class="button" value="${this.realNumber1}">Transfer</button>
                   <!--
                    <button type="button" id="btnConference" class="button" value="13033249089">Conf</button>
                    -->
                 
                  </div>
              </div>
              <div class="card">
                  <div class="header">${this.realName2}</div>
                  <div class="email">${this.realEmail2}</div>
                  <div class="phone">${this.realNumber2}</div>
                  <div> 
                    <button type="button" id="btnCall" class="button" value="${this.realNumber2}">Call</button>
                    <button type="button" id="btnConsult" class="button" value="${this.realNumber2}">Consult</button>
                    <button type="button" id="btnTransfer" class="button" value="${this.realNumber2}">Transfer</button>
                     <!--
                    <button type="button" id="btnConference" class="button" value="17146241280">Conf</button>
                    -->
                    
                  </div>
              </div>
              <div class="card">
                  <div class="header">${this.realName3}</div>
                  <div class="email">${this.realEmail3}</div>
                  <div class="phone">${this.realNumber3}</div>
                  <div> 
                    <button type="button" id="btnCall" class="button" value="${this.realNumber3}">Call</button>
                    <button type="button" id="btnConsult" class="button" value="${this.realNumber3}">Consult</button>
                    <button type="button" id="btnTransfer" class="button" value="${this.realNumber3}">Transfer</button>
                     <!--
                    <button type="button" id="btnConference" class="button" value="17205604888">Conf</button>
                    -->
                  </div>
              </div>
              
              
                ${this.users.results
            .map((user) => {
                return `
                        <template data-user-template>
                          <div class="card">
                            <div class="header" data-header>${user.name}</div>
                            <div class="email" data-email>${user.email}</div>
                            <div class="phone" data-phone>${user.phone}</div>
                            <button type="button" id="btnCall" class="button" value="${user.phone}">Call</button>
                            <button type="button" id="btnConsult" class="button" value="${user.phone}">Consult</button>
                            
                            <button type="button" id="btnTransfer" class="button" value="${user.phone}">Transfer</button>
                            <!--
                            <button type="button" id="btnConference" class="button" value="${user.phone}">Conf</button>
                            -->
                            
                          </div>
                        </template>    
                      `;
            })
            .join('')}
          </div>
                   `;
      }
    }
  }
);
